set logging overwrite on
file main.elf
target remote :3333
set $osp = $sp
set $sp = $sp - 16
set logging on
b main.c:7
c
macro define SendData(var) USART_SendData(USART2 , var)
macro define check_USART(ch,return) (((ch),(return)) ? ans[0]:ans[1])

call RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE)
call RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE)


macro define INIT_GPIO(pin, speed, mode) \
            ((GPIO_InitTypeDef*)$osp)->GPIO_Pin = pin, \
            ((GPIO_InitTypeDef*)$osp)->GPIO_Speed = speed, \
            ((GPIO_InitTypeDef*)$osp)->GPIO_Mode = mode, \
            GPIO_Init(GPIOA, $osp)
set INIT_GPIO(GPIO_Pin_3, 0, GPIO_Mode_IN_FLOATING)
set INIT_GPIO(GPIO_Pin_2, GPIO_Speed_50MHz, GPIO_Mode_AF_PP)
c

call USART_StructInit($osp)

#USART_Mode_Tx
call USART_Init(USART2, $osp)
call USART_Cmd(USART2, ENABLE)


call SendData('H')
print "%s" ,s[0]
call check_USART($1,s[0])
call SendData('e')
print "%s" ,s[1]
call check_USART($4,s[1])
call SendData('l')
print "%s" ,s[2]
call check_USART($7,s[2])
call SendData('l')
print "%s" ,s[3]
call check_USART($10,s[3])
call SendData('o')
print "%s" ,s[4]
call check_USART($13,s[4])